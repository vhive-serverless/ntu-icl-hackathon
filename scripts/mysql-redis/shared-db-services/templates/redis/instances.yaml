# templates/redis/instances.yaml
{{- range .Values.teams }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-{{ .name }}-data
  namespace: {{ $.Values.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: {{ $.Values.redis.storage.size }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-{{ .name }}
  namespace: {{ $.Values.namespace }}
spec:
  serviceName: redis-{{ .name }}
  replicas: 1
  selector:
    matchLabels:
      app: redis
      team: {{ .name }}
  template:
    metadata:
      labels:
        app: redis
        team: {{ .name }}
    spec:
      containers:
      - name: redis
        image: {{ $.Values.redis.image }}
        command:
        - redis-server
        - /usr/local/etc/redis/redis.conf
        resources:
          {{- toYaml $.Values.redis.resources | nindent 10 }}
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /usr/local/etc/redis/redis.conf
          subPath: redis.conf
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-{{ .name }}-data
      - name: redis-config
        configMap:
          name: redis-config-{{ .name }}
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - redis
                - key: team
                  operator: In
                  values:
                  - {{ .name }}
              topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: DoesNotExist

---
apiVersion: v1
kind: Service
metadata:
  name: redis-{{ .name }}
  namespace: {{ $.Values.namespace }}
  labels:
    app: redis
    team: {{ .name }}
spec:
  selector:
    app: redis
    team: {{ .name }}
  ports:
    - port: 6379
      targetPort: 6379
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config-{{ .name }}
  namespace: {{ $.Values.namespace }}
data:
  redis.conf: |
    port 6379
    maxmemory {{ $.Values.redis.global.maxMemory }}
    maxmemory-policy allkeys-lru
    maxclients {{ $.Values.redis.global.maxClients }}
    requirepass {{ .redis.password }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-{{ .name }}-network-policy
  namespace: {{ $.Values.namespace }}
spec:
  podSelector:
    matchLabels:
      app: redis
      team: {{ .name }}
  ingress:
    - ports:
        - protocol: TCP
          port: 6379
{{- end }}